schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

interface IUserError {
  message: String!
  code: String!
}

type AddBookPayload {
  book: BookDTO
  errors: [AddBookError!]
}

type BookAlreadyExistsError implements IUserError {
  message: String!
  isbn: String!
  code: String!
}

type BookDTO {
  id: Int!
  title: String!
  author: String!
  publicationDate: DateTime!
  isbn: String!
  genre: String!
  summary: String!
}

type Mutation {
  addBook(input: AddBookInput!): AddBookPayload! @cost(weight: "10")
}

type Query {
  books(where: BookDTOFilterInput @cost(weight: "10") order: [BookDTOSortInput!] @cost(weight: "10")): [BookDTO!]! @cost(weight: "10")
}

type Subscription {
  onNewBookAdded: BookDTO!
}

union AddBookError = BookAlreadyExistsError

input AddBookInput {
  title: String!
  author: String!
  publicationDate: DateTime!
  isbn: String!
  genre: String!
  summary: String
}

input BookDTOFilterInput {
  and: [BookDTOFilterInput!]
  or: [BookDTOFilterInput!]
  id: IntOperationFilterInput
  title: StringOperationFilterInput
  author: StringOperationFilterInput
  publicationDate: DateTimeOperationFilterInput
  isbn: StringOperationFilterInput
  genre: StringOperationFilterInput
  summary: StringOperationFilterInput
}

input BookDTOSortInput {
  id: SortEnumType @cost(weight: "10")
  title: SortEnumType @cost(weight: "10")
  author: SortEnumType @cost(weight: "10")
  publicationDate: SortEnumType @cost(weight: "10")
  isbn: SortEnumType @cost(weight: "10")
  genre: SortEnumType @cost(weight: "10")
  summary: SortEnumType @cost(weight: "10")
}

input DateTimeOperationFilterInput {
  eq: DateTime @cost(weight: "10")
  neq: DateTime @cost(weight: "10")
  in: [DateTime] @cost(weight: "10")
  nin: [DateTime] @cost(weight: "10")
  gt: DateTime @cost(weight: "10")
  ngt: DateTime @cost(weight: "10")
  gte: DateTime @cost(weight: "10")
  ngte: DateTime @cost(weight: "10")
  lt: DateTime @cost(weight: "10")
  nlt: DateTime @cost(weight: "10")
  lte: DateTime @cost(weight: "10")
  nlte: DateTime @cost(weight: "10")
}

input IntOperationFilterInput {
  eq: Int @cost(weight: "10")
  neq: Int @cost(weight: "10")
  in: [Int] @cost(weight: "10")
  nin: [Int] @cost(weight: "10")
  gt: Int @cost(weight: "10")
  ngt: Int @cost(weight: "10")
  gte: Int @cost(weight: "10")
  ngte: Int @cost(weight: "10")
  lt: Int @cost(weight: "10")
  nlt: Int @cost(weight: "10")
  lte: Int @cost(weight: "10")
  nlte: Int @cost(weight: "10")
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String @cost(weight: "10")
  neq: String @cost(weight: "10")
  contains: String @cost(weight: "20")
  ncontains: String @cost(weight: "20")
  in: [String] @cost(weight: "10")
  nin: [String] @cost(weight: "10")
  startsWith: String @cost(weight: "20")
  nstartsWith: String @cost(weight: "20")
  endsWith: String @cost(weight: "20")
  nendsWith: String @cost(weight: "20")
}

enum SortEnumType {
  ASC
  DESC
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")